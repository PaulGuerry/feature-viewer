/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var FeatureViewer;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/feature-viewer.js":
/*!*******************************!*\
  !*** ./src/feature-viewer.js ***!
  \*******************************/
/***/ ((module) => {

eval("function createFeature(sequence, div, options) {\n//        var nxSeq = sequence.startsWith('NX_') ? true : false;\n        var self = this;\n        // if (!div) var div = window;\n        this.events = {\n          FEATURE_SELECTED_EVENT: \"feature-viewer-position-selected\",\n            FEATURE_DESELECTED_EVENT: \"feature-viewer-position-deselected\",\n          ZOOM_EVENT: \"feature-viewer-zoom-altered\"\n        };\n\n        // if (!div) var div = window;\n        var div = div;\n        var el = document.getElementById(div.substring(1));\n        var svgElement;\n        var sequence = sequence;\n        var intLength = Number.isInteger(sequence) ? sequence : null;\n        var fvLength = intLength | sequence.length;\n        var features = [];\n        var SVGOptions = {\n            showSequence: false,\n            brushActive: false,\n            verticalLine: false,\n            dottedSequence: true\n        };\n        var offset = {start:1,end:fvLength};\n        if (options && options.offset) {\n            offset = options.offset;\n            if (offset.start < 1) {\n                offset.start = 1;\n                console.warn(\"WARNING ! offset.start should be > 0. Thus, it has been reset to 1.\");\n            }\n        }\n        var pathLevel = 0;\n        var svg;\n        var svgContainer;\n        var filter;\n        var yData = [];\n        var yAxisSVG;\n        var yAxisSVGgroup;\n        var Yposition = 20;\n        var level = 0;\n        var seqShift = 0;\n        var zoom = false;\n        var zoomMax = 50;\n        var current_extend = { \n                    length : offset.end - offset.start,\n                    start : offset.start,\n                    end : offset.end\n                }\n        var featureSelected = {};\n        var animation = true;\n\n        function colorSelectedFeat(feat, object) {\n            //change color && memorize\n            if (featureSelected !== {}) d3.select(featureSelected.id).style(\"fill\", featureSelected.originalColor);\n            if (object.type !== \"path\" && object.type !== \"line\"){\n                featureSelected = {\"id\": feat, \"originalColor\": d3.select(feat).style(\"fill\") || object.color};\n                d3.select(feat).style(\"fill\", \"orangered\");\n            }\n        }\n\n        /**\n         * Private Methods\n         */\n\n            //Init box & scaling\n        d3.select(div)\n            .style(\"position\", \"relative\")\n            .style(\"padding\", \"0px\")\n            .style(\"z-index\", \"2\");\n\n        var margin = {\n                top: 10,\n                right: 20,\n                bottom: 20,\n                left: 110\n            },\n            width = $(div).width() - margin.left - margin.right - 17,\n            height = 600 - margin.top - margin.bottom;\n        var scaling = d3.scale.linear()\n            .domain([offset.start, offset.end])\n            .range([5, width-5]);\n        var scalingPosition = d3.scale.linear()\n            .domain([0, width])\n            .range([offset.start, offset.end]);\n        \n        \n        \n\n        function updateLineTooltip(mouse,pD){\n            var xP = mouse-110;\n            var elemHover = \"\";\n            for (var l=0; l<pD.length;l++) {\n                if (scaling(pD[l].x) < xP && scaling(pD[l+1].x) > xP) {\n                    if ((xP - scaling(pD[l].x)) < (scaling(pD[l+1].x) - xP )) {\n                        elemHover = pD[l];\n                    }\n                    else elemHover = pD[l+1];\n                    break;\n                }\n            }\n            return elemHover;\n        }\n        \n        d3.helper = {};\n\n        d3.helper.tooltip = function (object) {\n            var tooltipDiv;\n            var selectedRect;\n            var bodyNode = d3.select(div).node();\n            var tooltipColor = options.tooltipColor ? options.tooltipColor : \"orangered\";\n\n            function tooltip(selection) {\n\n                selection.on('mouseover.tooltip', function (pD, pI) {\n                    // Clean up lost tooltips\n                    d3.select('body').selectAll('div.tooltip').remove();\n                    // Append tooltip\n                    var absoluteMousePos = d3.mouse(bodyNode);\n                    var rightside = (absoluteMousePos[0] > width);\n                    if (rightside) {\n                        tooltipDiv = d3.select(div)\n                            .append('div')\n                            .attr('class', 'tooltip3');\n                    } else {\n                        tooltipDiv = d3.select(div)\n                            .append('div')\n                            .attr('class', 'tooltip2');\n                        tooltipDiv.style({\n                            left: (absoluteMousePos[0] - 15) + 'px'\n                        });\n                    }\n                    tooltipDiv.style({\n                        bottom: (bodyNode.offsetHeight - absoluteMousePos[1] + 16) + 'px',\n                        'background-color': '#eee',\n                        width: 'auto',\n                        'max-width': '170px',\n                        height: 'auto',\n                        'max-height': '68px',\n                        padding: '5px',\n                        \"font\": '10px sans-serif',\n                        'text-align': 'center',\n                        position: 'absolute',\n                        'z-index': 45,\n                        'box-shadow': '0 1px 2px 0 #656565' \n                    });\n                    if (object.type === \"path\") {\n                        var first_line = '<p style=\"margin:2px;font-weight:700;color:' + tooltipColor +'\">' + pD[0].x + '&#x256d;&#x256e;' + pD[1].x + '</p>';\n                        if (pD.description) var second_line = '<p style=\"margin:2px;color:' + tooltipColor +';font-size:9px\">' + pD.description + '</p>';\n                        else var second_line = '';\n                    } else if (object.type === \"line\") {\n                        var elemHover = updateLineTooltip(absoluteMousePos[0],pD);\n                        if (elemHover.description) {\n                            var first_line = '<p style=\"margin:2px;font-weight:700;color:' + tooltipColor +'\">' + elemHover.x + ' : <span> ' + elemHover.y + '</span></p>';\n                            var second_line = '<p style=\"margin:2px;color:' + tooltipColor +';font-size:9px\">' + elemHover.description + '</p>';\n                        }\n                        else {\n                            var first_line = '<p style=\"margin:2px;color:' + tooltipColor +'\">position : <span id=\"tLineX\">' + elemHover.x + '</span></p>';\n                            var second_line = '<p style=\"margin:2px;color:' + tooltipColor +'\">count : <span id=\"tLineC\">' + elemHover.y + '</span></p>';\n                        }\n                    } else if (object.type === \"unique\" || pD.x === pD.y) {\n                        var first_line = '<p style=\"margin:2px;font-weight:700;color:' + tooltipColor +'\">' + pD.x + '</p>';\n                        if (pD.description) var second_line = '<p style=\"margin:2px;color:' + tooltipColor +';font-size:9px\">' + pD.description + '</p>';\n                        else var second_line = '';\n                    } else {\n                        var first_line = '<p style=\"margin:2px;font-weight:700;color:' + tooltipColor +'\">' + pD.x + ' - ' + pD.y + '</p>';\n                        if (pD.description) var second_line = '<p style=\"margin:2px;color:' + tooltipColor +';font-size:9px\">' + pD.description + '</p>';\n                        else var second_line = '';\n                    }\n\n                    tooltipDiv.html(first_line + second_line);\n                    if (rightside) {\n                        tooltipDiv.style({\n                            left: (absoluteMousePos[0] + 10 - (tooltipDiv.node().getBoundingClientRect().width)) + 'px'\n                        })\n                    }\n                })\n                    .on('mousemove.tooltip', function (pD, pI) {\n                    \n                        if (object.type === \"line\") {\n                            var absoluteMousePos = d3.mouse(bodyNode);\n                            var elemHover = updateLineTooltip(absoluteMousePos[0],pD);\n                            if (elemHover.description) {\n                                var first_line = '<p style=\"margin:2px;color:' + tooltipColor +'\">' + elemHover.x + ' : <span> ' + elemHover.y + '</span></p>';\n                                var second_line = '<p style=\"margin:2px;color:' + tooltipColor +';font-size:9px\">' + elemHover.description + '</p>';\n                            }\n                            else {\n                                var first_line = '<p style=\"margin:2px;color:' + tooltipColor +'\">position : <span id=\"tLineX\">' + elemHover.x + '</span></p>';\n                                var second_line = '<p style=\"margin:2px;color:' + tooltipColor +'\">count : <span id=\"tLineC\">' + elemHover.y + '</span></p>';\n                            }\n                            tooltipDiv.html(first_line + second_line);\n//                            $('#tLineX').text(elemHover.x);\n//                            $('#tLineC').text(elemHover.y);  \n                        }\n                        // Move tooltip\n                        // IE 11 sometimes fires mousemove before mouseover\n                        if (tooltipDiv === undefined) { return; }\n                        var absoluteMousePos = d3.mouse(bodyNode);\n                        var rightside = (absoluteMousePos[0] > width);\n                        if (rightside) {\n                            tooltipDiv.attr(\"class\", \"tooltip3\");\n                            tooltipDiv.style({\n                                left: (absoluteMousePos[0] + 10 - (tooltipDiv.node().getBoundingClientRect().width)) + 'px',\n                                bottom: (bodyNode.offsetHeight - absoluteMousePos[1] + 16) + 'px'\n                            });\n                        } else {\n                            tooltipDiv.attr(\"class\", \"tooltip2\");\n                            tooltipDiv.style({\n                                left: (absoluteMousePos[0] - 15) + 'px',\n                                bottom: (bodyNode.offsetHeight - absoluteMousePos[1] + 16) + 'px'\n                            })\n                        }\n                    })\n                    .on('mouseout.tooltip', function (pD, pI) {\n                        // Remove tooltip\n                        tooltipDiv.remove();\n                    })\n                    .on('click', function (pD, pI) {\n                        var xTemp;\n                        var yTemp;\n                        var xRect;\n                        var widthRect;\n                        var elemHover;\n\n                        if(this.nodeName === \"text\") {\n                            var rect = \"#\"+this.previousSibling.id;\n                            if(rect.nodeName !== \"#\") colorSelectedFeat(rect, object);\n                        }\n                        else colorSelectedFeat(this, object);\n\n                        var svgWidth = SVGOptions.brushActive ? d3.select(\".background\").attr(\"width\") : svgContainer.node().getBBox().width;\n                        d3.select('body').selectAll('div.selectedRect').remove();\n                        // Append tooltip\n                        selectedRect = d3.select(div)\n                            .append('div')\n                            .attr('class', 'selectedRect');\n                        if (object.type === \"path\") {\n                            xTemp = pD[0].x;\n                            yTemp = pD[1].x;\n                        } else if (object.type === \"line\") {\n                            var absoluteMousePos = d3.mouse(bodyNode);\n                            elemHover = updateLineTooltip(absoluteMousePos[0],pD);\n                            xTemp = elemHover.x - 0.5;\n                            yTemp = elemHover.x + 0.5;\n                        } else if (object.type === \"unique\" || pD.x === pD.y) {\n                            xTemp = pD.x - 0.4;\n                            yTemp = pD.y + 0.4;\n                        } else {\n                            xTemp = pD.x;\n                            yTemp = pD.y;\n                        }\n\n                        if (scaling(xTemp) < 0 && scaling(yTemp) > svgWidth) {\n                            xRect = margin.left;\n                            widthRect = parseInt(svgWidth) + 5;\n                        } else if (scaling(xTemp) < 0) {\n                            xRect = margin.left;\n                            widthRect = (scaling(yTemp));\n                        } else if (scaling(yTemp) > svgWidth) {\n                            xRect = scaling(xTemp) + margin.left;\n                            widthRect = parseInt(svgWidth) - scaling(xTemp);\n                            widthRect =  widthRect + 5;\n                        } else {\n                            xRect = scaling(xTemp) + margin.left;\n                            widthRect = (scaling(yTemp) - scaling(xTemp));\n                        }\n                        selectedRect.style({\n                            left: xRect + 'px',\n                            top: ($(div + \" .svgHeader\").length) ? 60 + 'px' : 10 + 'px',\n                            'background-color': 'rgba(0, 0, 0, 0.2)',\n                            width: widthRect + 'px',\n                            height: (Yposition + 50) + 'px',\n                            position: 'absolute',\n                            'z-index': -1,\n                            'box-shadow': '0 1px 2px 0 #656565'\n                        });\n\n                        if (CustomEvent) {\n                            var event = new CustomEvent(self.events.FEATURE_SELECTED_EVENT, {\n                                detail: {\n                                    start: object.type === \"path\" ? pD[0].x : object.type === \"line\" ? elemHover.x : pD.x,\n                                    end: object.type === \"path\" ? pD[1].x : object.type === \"line\" ? elemHover.y : pD.y,\n                                    id: object.type === \"path\" ? pD[0].id : object.type === \"line\" ? elemHover.id : pD.id,\n                                    description:object.type === \"path\" ? pD[0].description : object.type === \"line\" ? elemHover.description : pD.description\n                                }\n                            });\n                            svgElement.dispatchEvent(event);\n                        } else {\n                            console.warn(\"CustomEvent is not defined....\");\n                        }\n                        if (self.trigger) self.trigger(self.events.FEATURE_SELECTED_EVENT, {\n                            start: object.type === \"path\" ? pD[0].x : object.type === \"line\" ? elemHover.x : pD.x,\n                            end: object.type === \"path\" ? pD[1].x : object.type === \"line\" ? elemHover.y : pD.y,\n                            id: object.type === \"path\" ? pD[0].id : object.type === \"line\" ? elemHover.id : pD.id,\n                            description:object.type === \"path\" ? pD[0].description : object.type === \"line\" ? elemHover.description : pD.description\n                        });\n\n                    });\n            }\n\n            tooltip.attr = function (_x) {\n                if (!arguments.length) return attrs;\n                attrs = _x;\n                return this;\n            };\n\n            tooltip.style = function (_x) {\n                if (!arguments.length) return styles;\n                styles = _x;\n                return this;\n            };\n\n            return tooltip;\n        };\n\n        //COMPUTING FUNCTION\n        var X = function (d) {\n            return scaling(d.x);\n        };\n        var displaySequence = function (seq) {\n            return width / seq > 5;\n        };\n        var rectWidth = function (d) {\n            return (scaling(d.y) - scaling(d.x));\n        };\n        function rectX(object) {\n            if (object.x === object.y) {\n                return scaling(object.x-0.4);\n            }\n            return scaling(object.x);\n        };\n        function rectWidth2(d){\n            if (d.x === d.y) {\n                if (scaling(d.x + 0.4) - scaling(d.x - 0.4) < 2) return 2;\n                else return scaling(d.x + 0.4) - scaling(d.x - 0.4);\n            }\n            return (scaling(d.y) - scaling(d.x));\n        };\n        var uniqueWidth = function (d) {\n            return (scaling(1));\n        };\n\n        this.onFeatureSelected = function (listener) {\n            svgElement.addEventListener(self.events.FEATURE_SELECTED_EVENT, listener);\n        };\n        this.onFeatureDeselected = function (listener) {\n            svgElement.addEventListener(self.events.FEATURE_DESELECTED_EVENT, listener);\n        };\n\n      this.onZoom = function (listener) {\n            svgElement.addEventListener(self.events.ZOOM_EVENT, listener);\n        };\n\n        function addLevel(array) {\n            var leveling = [];\n            array.forEach(function (d) {\n                if (leveling === []) {\n                    leveling.push(d.y);\n                    d.level = 0;\n                } else {\n                    var placed = false;\n                    for (var k = 0; k < leveling.length; k++) {\n                        if (d.x > leveling[k]) {\n                            placed = true;\n                            d.level = k;\n                            leveling[k] = d.y;\n                            break;\n                        }\n                    }\n                    if (placed === false) {\n                        leveling.push(d.y);\n                        d.level = leveling.length - 1;\n                    }\n                }\n            });\n            return leveling.length;\n        }\n\n        function addLevelToBond(array) {\n            var leveling = [];\n            var newArray = [];\n            array.forEach(function (d) {\n                if (leveling === []) {\n                    leveling.push(d[2].x);\n                    d[1].y = 1;\n                } else {\n                    var placed = false;\n                    for (var k = 0; k < leveling.length; k++) {\n                        if (d[0].x > leveling[k]) {\n                            placed = true;\n                            d[1].y = k + 1;\n                            leveling[k] = d[2].x;\n                            break;\n                        }\n                    }\n                    if (placed === false) {\n                        leveling.push(d[2].x);\n                        d[1].y = leveling.length;\n                    }\n                }\n            });\n            return leveling.length;\n        }\n\n        var lineBond = d3.svg.line()\n            .interpolate(\"step-before\")\n            .x(function (d) {\n                return scaling(d.x);\n            })\n            .y(function (d) {\n                return -d.y * 10 + pathLevel;\n            });\n        var lineGen = d3.svg.line()\n          \n//          .interpolate(\"cardinal\")\n          .x(function(d) {\n            return scaling(d.x);\n          })\n          .y(function (d) {\n                return lineYscale(-d.y) * 10 + pathLevel;\n            });\n        var lineYscale = d3.scale.linear()\n            .domain([0,-30])\n            .range([0,-20]);\n        var line = d3.svg.line()\n            .interpolate(\"linear\")\n            .x(function (d) {\n                return scaling(d.x);\n            })\n            .y(function (d) {\n                return d.y + 6;\n            });\n\n        //Create Axis\n        var xAxis = d3.svg.axis()\n            .scale(scaling)\n            .tickFormat(d3.format(\"d\"))\n            .orient(\"bottom\");\n        \n        function shadeBlendConvert(p, from, to) {\n            if(typeof(p)!=\"number\"||p<-1||p>1||typeof(from)!=\"string\"||(from[0]!='r'&&from[0]!='#')||(typeof(to)!=\"string\"&&typeof(to)!=\"undefined\"))return null; //ErrorCheck\n            if(!this.sbcRip)this.sbcRip=function(d){\n                var l=d.length,RGB=new Object();\n                if(l>9){\n                    d=d.split(\",\");\n                    if(d.length<3||d.length>4)return null;//ErrorCheck\n                    RGB[0]=i(d[0].slice(4)),RGB[1]=i(d[1]),RGB[2]=i(d[2]),RGB[3]=d[3]?parseFloat(d[3]):-1;\n                }else{\n                    if(l==8||l==6||l<4)return null; //ErrorCheck\n                    if(l<6)d=\"#\"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(l>4?d[4]+\"\"+d[4]:\"\"); //3 digit\n                    d=i(d.slice(1),16),RGB[0]=d>>16&255,RGB[1]=d>>8&255,RGB[2]=d&255,RGB[3]=l==9||l==5?r(((d>>24&255)/255)*10000)/10000:-1;\n                }\n                return RGB;}\n            var i=parseInt,r=Math.round,h=from.length>9,h=typeof(to)==\"string\"?to.length>9?true:to==\"c\"?!h:false:h,b=p<0,p=b?p*-1:p,to=to&&to!=\"c\"?to:b?\"#000000\":\"#FFFFFF\",f=sbcRip(from),t=sbcRip(to);\n            if(!f||!t)return null; //ErrorCheck\n            if(h)return \"rgb(\"+r((t[0]-f[0])*p+f[0])+\",\"+r((t[1]-f[1])*p+f[1])+\",\"+r((t[2]-f[2])*p+f[2])+(f[3]<0&&t[3]<0?\")\":\",\"+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*10000)/10000:t[3]<0?f[3]:t[3])+\")\");\n            else return \"#\"+(0x100000000+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*255):t[3]>-1?r(t[3]*255):f[3]>-1?r(f[3]*255):255)*0x1000000+r((t[0]-f[0])*p+f[0])*0x10000+r((t[1]-f[1])*p+f[1])*0x100+r((t[2]-f[2])*p+f[2])).toString(16).slice(f[3]>-1||t[3]>-1?1:3);\n        }\n\n        function addXAxis(position) {\n            svgContainer.append(\"g\")\n                .attr(\"class\", \"x axis Xaxis\")\n                .attr(\"transform\", \"translate(0,\" + (position + 20) + \")\")\n                .call(xAxis);\n        }\n\n        function updateXaxis(position) {\n            svgContainer.selectAll(\".Xaxis\")\n                .attr(\"transform\", \"translate(0,\" + (position + 20) + \")\")\n        }\n\n        function updateSVGHeight(position) {\n            svg.attr(\"height\", position + 60 + \"px\");\n            svg.select(\"clippath rect\").attr(\"height\", position + 60 + \"px\");\n        }\n\n        var yAxisScale = d3.scale.ordinal()\n            .domain([0, yData.length])\n            .rangeRoundBands([0, 500], .1);\n        var yAxis = d3.svg.axis()\n            .scale(yAxisScale)\n            .tickValues(yData) //specify an array here for values\n            .tickFormat(function (d) {\n                return d\n            })\n            .orient(\"left\");\n\n        function addYAxis() {\n            yAxisSVG = svg.append(\"g\")\n                .attr(\"class\", \"pro axis\")\n                .attr(\"transform\", \"translate(0,\" + margin.top + \")\");\n            updateYaxis();\n        }\n\n        function updateYaxis() {\n\n            yAxisSVGgroup = yAxisSVG\n                .selectAll(\".yaxis\")\n                .data(yData)\n                .enter()\n                .append(\"g\");\n            yAxisSVGgroup\n                .append(\"polygon\") // attach a polygon\n                .attr(\"class\", function (d) {\n                    if (d.filter) return d.filter.split(\" \").join(\"_\") + \"Arrow\";\n                    return \"Arrow\";\n                })\n                .style(\"stroke\", \"\") // colour the line\n                .style(\"fill\", \"#DFD5D3\") // remove any fill colour\n                .attr(\"points\", function (d) {\n                    return (margin.left - 105) + \",\" + (d.y - 3) + \", \" + (margin.left - 105) + \",\" + (d.y + 12) + \", \" + (margin.left - 15) + \",\" + (d.y + 12) + \", \" + (margin.left - 7) + \",\" + (d.y + 4.5) + \", \" + (margin.left - 15) + \",\" + (d.y -3); // x,y points\n                });\n            yAxisSVGgroup\n                .append(\"text\")\n                .attr(\"class\", \"yaxis\")\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"x\", function () {\n                    return margin.left - 102\n                })\n                .attr(\"y\", function (d) {\n                    return d.y + 8\n                })\n                .text(function (d) {\n                    return d.title\n                });\n        }\n\n        function forcePropagation(item) {\n            item.on('mousedown', function () {\n                brush_elm = svg.select(\".brush\").node();\n                new_click_event = new Event('mousedown');\n                new_click_event.pageX = d3.event.pageX;\n                new_click_event.clientX = d3.event.clientX;\n                new_click_event.pageY = d3.event.pageY;\n                new_click_event.clientY = d3.event.clientY;\n                if (brush_elm) {\n                    brush_elm.dispatchEvent(new_click_event);\n                }\n            });\n        }\n\n        /** export to new utils file  */\n        var preComputing = {\n            path: function (object) {\n                object.data.sort(function (a, b) {\n                    return a.x - b.x;\n                });\n                var level = addLevel(object.data);\n                object.data = object.data.map(function (d) {\n                    return [{\n                        x: d.x,\n                        y: 0,\n                        id: d.id,\n                        description: d.description,\n                        color: d.color\n                    }, {\n                        x: d.y,\n                        y: d.level + 1,\n                        id: d.id\n                    }, {\n                        x: d.y,\n                        y: 0,\n                        id: d.id\n                    }]\n                })\n                pathLevel = level * 10 + 5;\n                object.height = level * 10 + 5;\n            },\n            line: function (object) {\n                if (!object.height) object.height = 10;\n                var shift = parseInt(object.height);\n                var level = 0;\n                for (var i in object.data) {\n                    object.data[i].sort(function (a, b) {\n                        return a.x - b.x;\n                    });\n                    if (object.data[i][0].y !== 0) {\n                        object.data[i].unshift({\n                            x:object.data[i][0].x-1,\n                            y:0\n                        })\n                    }\n                    if (object.data[i][object.data[i].length -1].y !== 0){\n                        object.data[i].push({\n                            x:object.data[i][object.data[i].length -1].x+1,\n                            y:0\n                        })\n                    }\n                    var maxValue = Math.max.apply(Math,object.data[i].map(function(o){return Math.abs(o.y);}));\n                    level = maxValue > level ? maxValue : level;\n                    \n\n                    object.data[i] = [object.data[i].map(function (d) {\n                        return {\n                            x: d.x,\n                            y: d.y,\n                            id: d.id,\n                            description: d.description\n                        }\n                    })]\n                }\n                lineYscale.range([0, -(shift)]).domain([0, -(level)]);\n                pathLevel = shift * 10 +5;\n                object.level = level;\n                object.shift = shift * 10 +5;\n            },\n            multipleRect: function (object) {\n                object.data.sort(function (a, b) {\n                    return a.x - b.x;\n                });\n                level = addLevel(object.data);\n                pathLevel = level * 10 + 5;\n            }\n        };\n\n        var fillSVG = {\n            typeIdentifier: function (object) {\n                if (object.type === \"rect\") {\n                    preComputing.multipleRect(object);\n                    yData.push({\n                        title: object.name,\n                        y: Yposition,\n                        filter: object.filter\n                    });\n                    fillSVG.rectangle(object, Yposition);\n                } else if (object.type === \"text\") {\n                    fillSVG.sequence(object.data, Yposition);\n                    yData.push({\n                        title: object.name,\n                        y: Yposition,\n                        filter: object.filter\n                    });\n                    scaling.range([5, width-5]);\n                } else if (object.type === \"unique\") {\n                    fillSVG.unique(object, Yposition);\n                    yData.push({\n                        title: object.name,\n                        y: Yposition,\n                        filter: object.filter\n                    });\n                } else if (object.type === \"multipleRect\") {\n                    preComputing.multipleRect(object);\n                    fillSVG.multipleRect(object, Yposition, level);\n                    yData.push({\n                        title: object.name,\n                        y: Yposition,\n                        filter: object.filter\n                    });\n                    Yposition += (level - 1) * 10;\n                } else if (object.type === \"path\") {\n                    preComputing.path(object);\n                    fillSVG.path(object, Yposition);\n                    Yposition += pathLevel;\n                    yData.push({\n                        title: object.name,\n                        y: Yposition - 10,\n                        filter: object.filter\n                    });\n                } else if (object.type === \"line\") {\n                    if (!(Array.isArray(object.data[0]))) object.data = [object.data];\n                    if (!(Array.isArray(object.color))) object.color = [object.color];\n                    var negativeNumbers = false;\n                    object.data.forEach(function(d){\n                        if (d.filter(function(l){ return l.y < 0}).length) negativeNumbers = true;\n                    });\n                    preComputing.line(object);\n                    fillSVG.line(object, Yposition);\n                    Yposition += pathLevel;\n                    yData.push({\n                        title: object.name,\n                        y: Yposition - 10,\n                        filter: object.filter\n                    });\n                    Yposition += negativeNumbers ? pathLevel-5 : 0;\n                }\n            },\n            sequence: function (seq, position, start) {\n                //Create group of sequence\n                if (!start) var start = 0;\n                svgContainer.append(\"g\")\n                    .attr(\"class\", \"seqGroup\")\n                    .selectAll(\".AA\")\n                    .data(seq)\n                    .enter()\n                    .append(\"text\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"class\", \"AA\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"x\", function (d, i) {\n                        return scaling.range([5, width-5])(i + start)\n                    })\n                    .attr(\"y\", position)\n                    .attr(\"font-size\", \"10px\")\n                    .attr(\"font-family\", \"monospace\")\n                    .text(function (d, i) {\n                        return d\n                    });\n            },\n            sequenceLine: function () {\n                //Create line to represent the sequence\n                if (SVGOptions.dottedSequence){\n                    var dottedSeqLine = svgContainer.selectAll(\".sequenceLine\")\n                        .data([[{x:1,y:12},{x:fvLength,y:12}]])\n                        .enter()\n                        .append(\"path\")\n                        .attr(\"clip-path\", \"url(#clip)\")\n                        .attr(\"d\", line)\n                        .attr(\"class\",\"sequenceLine\")\n                        .style(\"z-index\", \"0\")\n                        .style(\"stroke\", \"black\")\n                        .style(\"stroke-dasharray\",\"1,3\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"stroke-opacity\",0);\n\n                    dottedSeqLine\n                        .transition()\n                        .duration(500)\n                        .style(\"stroke-opacity\", 1);\n                }\n            },\n            rectangle: function (object, position) {\n                //var rectShift = 20;\n                if (!object.height) object.height = 12;\n                var rectHeight = object.height;\n                \n                var rectShift = rectHeight + rectHeight/3;\n                var lineShift = rectHeight/2 - 6;\n//                var lineShift = rectHeight/2 - 6;\n\n                var rectsPro = svgContainer.append(\"g\")\n                    .attr(\"class\", \"rectangle\")\n                    .attr(\"transform\", \"translate(0,\" + position + \")\");\n                \n                var dataline=[];\n                for (var i = 0; i < level; i++) {\n                    dataline.push([{\n                            x: 1,\n                            y: (i * rectShift + lineShift)\n                        }, {\n                            x: fvLength,\n                            y: (i * rectShift + lineShift)\n                        }]);\n                }\n                rectsPro.selectAll(\".line\" + object.className)\n                    .data(dataline)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"d\", line)\n                    .attr(\"class\", function () {\n                        return \"line\" + object.className\n                    })\n                    .style(\"z-index\", \"0\")\n                    .style(\"stroke\", object.color)\n                    .style(\"stroke-width\", \"1px\");\n\n\n                var rectsProGroup = rectsPro.selectAll(\".\" + object.className + \"Group\")\n                    .data(object.data)\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"class\", object.className + \"Group\")\n                    .attr(\"transform\", function (d) {\n                        return \"translate(\" + rectX(d) + \",0)\"\n                    });\n\n                rectsProGroup\n                    .append(\"rect\")\n                    .attr(\"class\", \"element \" + object.className)\n                    .attr(\"id\", function (d) {\n                        return \"f\" + d.id\n                    })\n                    .attr(\"y\", function (d) {\n                        return d.level * rectShift\n                    })\n                    .attr(\"width\", rectWidth2)\n                    .attr(\"height\", rectHeight)\n                    .style(\"fill\", function(d) { return d.color || object.color })\n                    .style(\"z-index\", \"13\")\n                    .call(d3.helper.tooltip(object));\n\n                rectsProGroup\n                    .append(\"text\")\n                    .attr(\"class\", \"element \" + object.className + \"Text\")\n                    .attr(\"y\", function (d) {\n                        return d.level * rectShift + rectHeight/2\n                    })\n                    .attr(\"dy\", \"0.35em\")\n                    .style(\"font-size\", \"10px\")\n                    .text(function (d) {\n                        return d.description\n                    })\n                    .style(\"fill\", \"black\")\n                    .style(\"z-index\", \"15\")\n                    .style(\"visibility\", function (d) {\n                        if (d.description) {\n                            return (scaling(d.y) - scaling(d.x)) > d.description.length * 8 && rectHeight > 11 ? \"visible\" : \"hidden\";\n                        } else return \"hidden\";\n                    })\n                    .call(d3.helper.tooltip(object));\n\n\n                //rectsPro.selectAll(\".\" + object.className)\n                //    .data(object.data)\n                //    .enter()\n                //    .append(\"rect\")\n                //    .attr(\"clip-path\", \"url(#clip)\")\n                //    .attr(\"class\", \"element \"+object.className)\n                //    .attr(\"id\", function(d) { return \"f\"+d.id })\n                //    .attr(\"x\", X)\n                //    .attr(\"width\", rectWidth)\n                //    .attr(\"height\", 12)\n                //    .style(\"fill\", object.color)\n                //    .style(\"z-index\", \"13\")\n                //    .call(d3.helper.tooltip(object));\n\n                forcePropagation(rectsProGroup);\n                var uniqueShift = rectHeight > 12 ? rectHeight - 6 : 0;\n                Yposition += level < 2 ? uniqueShift : (level-1) * rectShift + uniqueShift;\n            },\n            unique: function (object, position) {\n                var rectsPro = svgContainer.append(\"g\")\n                    .attr(\"class\", \"uniquePosition\")\n                    .attr(\"transform\", \"translate(0,\" + position + \")\");\n\n                var dataline=[];\n                dataline.push([{\n                        x: 1,\n                        y: 0\n                    }, {\n                        x: fvLength,\n                        y: 0\n                    }]);\n                \n                rectsPro.selectAll(\".line\" + object.className)\n                    .data(dataline)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"d\", line)\n                    .attr(\"class\", \"line\" + object.className)\n                    .style(\"z-index\", \"0\")\n                    .style(\"stroke\", object.color)\n                    .style(\"stroke-width\", \"1px\");\n\n                rectsPro.selectAll(\".\" + object.className)\n                    .data(object.data)\n                    .enter()\n                    .append(\"rect\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"class\", \"element \" + object.className)\n                    .attr(\"id\", function (d) {\n                        return \"f\" + d.id\n                    })\n                    .attr(\"x\", function (d) {\n                        return scaling(d.x - 0.4)\n                    })\n                    .attr(\"width\", function (d) {\n                        if (scaling(d.x + 0.4) - scaling(d.x - 0.4) < 2) return 2;\n                        else return scaling(d.x + 0.4) - scaling(d.x - 0.4);\n                    })\n                    .attr(\"height\", 12)\n                    .style(\"fill\", function(d) {return d.color ||  object.color})\n                    .style(\"z-index\", \"3\")\n                    .call(d3.helper.tooltip(object));\n\n                forcePropagation(rectsPro);\n            },\n            path: function (object, position) {\n                var pathsDB = svgContainer.append(\"g\")\n                    .attr(\"class\", \"pathing\")\n                    .attr(\"transform\", \"translate(0,\" + position + \")\");\n\n                var dataline=[];\n                dataline.push([{\n                        x: 1,\n                        y: 0\n                    }, {\n                        x: fvLength,\n                        y: 0\n                    }]);\n                \n                pathsDB.selectAll(\".line\" + object.className)\n                    .data(dataline)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"d\", lineBond)\n                    .attr(\"class\", \"line\" + object.className)\n                    .style(\"z-index\", \"0\")\n                    .style(\"stroke\", object.color)\n                    .style(\"stroke-width\", \"1px\");\n\n                pathsDB.selectAll(\".\" + object.className)\n                    .data(object.data)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"class\", \"element \" + object.className)\n                    .attr(\"id\", function (d) {\n                        return \"f\" + d[0].id\n                    })\n                    .attr(\"d\", lineBond)\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", function(d) {return d[0].color || object.color})\n                    .style(\"z-index\", \"3\")\n                    .style(\"stroke-width\", \"2px\")\n                    .call(d3.helper.tooltip(object));\n\n                forcePropagation(pathsDB);\n            },\n            line: function (object, position) {\n                if (!object.interpolation) object.interpolation = \"monotone\";\n                if (object.fill === undefined) object.fill = true;\n                var histog = svgContainer.append(\"g\")\n                    .attr(\"class\", \"lining\")\n                    .attr(\"transform\", \"translate(0,\" + position + \")\");\n\n                var dataline=[];\n                dataline.push([{\n                        x: 1,\n                        y: 0\n                    }, {\n                        x: fvLength,\n                        y: 0\n                    }]);\n                \n                histog.selectAll(\".line\" + object.className)\n                    .data(dataline)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"d\", lineBond)\n                    .attr(\"class\", \"line\" + object.className)\n                    .style(\"z-index\", \"0\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"1px\");\n                object.data.forEach(function(dd,i,array){\n                    histog.selectAll(\".\" + object.className + i)\n                    .data(dd)\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"class\", \"element \" + object.className + \" \" + object.className + i)\n                    .attr(\"d\", lineGen.interpolate(object.interpolation))\n                    .style(\"fill\", object.fill ? shadeBlendConvert(0.6, object.color[i]) || shadeBlendConvert(0.6, \"#000\") : \"none\")\n                    .style(\"stroke\", object.color[i] || \"#000\")\n                    .style(\"z-index\", \"3\")\n                    .style(\"stroke-width\", \"2px\")\n//                    .style(\"shape-rendering\", \"crispEdges\")\n                    .call(d3.helper.tooltip(object));\n                })\n                \n                forcePropagation(histog);\n            },\n            multipleRect: function (object, position, level) {\n                var rectHeight = 8;\n                var rectShift = 10;\n                var rects = svgContainer.append(\"g\")\n                    .attr(\"class\", \"multipleRects\")\n                    .attr(\"transform\", \"translate(0,\" + position + \")\");\n\n                for (var i = 0; i < level; i++) {\n                    rects.append(\"path\")\n                        .attr(\"d\", line([{\n                            x: 1,\n                            y: (i * rectShift - 2)\n                        }, {\n                            x: fvLength,\n                            y: (i * rectShift - 2)\n                        }]))\n                        .attr(\"class\", function () {\n                            return \"line\" + object.className\n                        })\n                        .style(\"z-index\", \"0\")\n                        .style(\"stroke\", object.color)\n                        .style(\"stroke-width\", \"1px\");\n                }\n\n                rects.selectAll(\".\" + object.className)\n                    .data(object.data)\n                    .enter()\n                    .append(\"rect\")\n                    .attr(\"clip-path\", \"url(#clip)\")\n                    .attr(\"class\", \"element \" + object.className)\n                    .attr(\"id\", function (d) {\n                        return \"f\" + d.id\n                    })\n                    .attr(\"x\", X)\n                    .attr(\"y\", function (d) {\n                        return d.level * rectShift\n                    })\n                    .attr(\"width\", rectWidth)\n                    .attr(\"height\", rectHeight)\n                    .style(\"fill\", function(d) { return d.color || object.color })\n                    .style(\"z-index\", \"13\")\n                    .call(d3.helper.tooltip(object));\n\n                forcePropagation(rects);\n            }\n        };\n\n        this.showFilteredFeature = function(className, color, baseUrl){\n            var featureSelected = yAxisSVG.selectAll(\".\"+className+\"Arrow\");\n            var minY = margin.left - 105;\n            var maxY = margin.left - 7;\n\n            var gradient = svg\n                .append(\"linearGradient\")\n                .attr(\"y1\", \"0\")\n                .attr(\"y2\", \"0\")\n                .attr(\"x1\", minY)\n                .attr(\"x2\", maxY)\n                .attr(\"id\", \"gradient\")\n                .attr(\"spreadMethod\", \"pad\")\n                .attr(\"gradientUnits\", \"userSpaceOnUse\");\n\n            gradient\n                .append(\"stop\")\n                .attr(\"offset\", \"0.3\")\n                .attr(\"stop-color\", \"#DFD5D3\")\n                .attr(\"stop-opacity\", 1);\n\n\n            var redgrad = gradient\n                .append(\"stop\")\n                .attr(\"offset\", \"1\")\n                .attr(\"stop-opacity\", 1)\n                .attr(\"stop-color\", \"#DFD5D3\");\n\n            redgrad\n                .attr(\"stop-color\", color);\n\n            var url_gradient = \"url(#gradient)\";\n            var url_dropshadow = \"url(#dropshadow)\";\n            if (baseUrl) {\n                url_gradient = \"url(\" + baseUrl + \"#gradient)\";\n                url_dropshadow = \"url(\" + baseUrl +\"#dropshadow)\";\n            }\n\n            var selection = yAxisSVG.selectAll(\".\"+className+\"Arrow\")\n                .style(\"fill\", url_gradient)\n                .style(\"stroke\", \"\")\n                .attr(\"filter\", url_dropshadow);\n            selection\n                .attr(\"points\", function (d) {\n                    return (margin.left - 105) + \",\" + (d.y - 3) + \", \" + (margin.left - 105) + \",\" + (d.y + 12) + \", \" + (margin.left - 10) + \",\" + (d.y + 12) + \", \" + (margin.left - 2) + \",\" + (d.y + 4.5) + \", \" + (margin.left - 10) + \",\" + (d.y -3); // x,y points\n                });\n        };\n        this.hideFilteredFeature = function(className){\n            yAxisSVG.selectAll(\".\"+className+\"Arrow\")\n                .style(\"fill\", \"rgba(95,46,38,0.2)\")\n                .attr(\"filter\", \"\")\n                .attr(\"points\", function (d) {\n                    return (margin.left - 105) + \",\" + (d.y - 3) + \", \" + (margin.left - 105) + \",\" + (d.y + 12) + \", \" + (margin.left - 15) + \",\" + (d.y + 12) + \", \" + (margin.left - 7) + \",\" + (d.y + 4.5) + \", \" + (margin.left - 15) + \",\" + (d.y -3); // x,y points\n                });\n        };\n\n        var transition = {\n            rectangle: function (object) {\n                svgContainer.selectAll(\".line\" + object.className)\n                    .attr(\"d\",line.x(function (d) {\n                    return scaling(d.x);\n                }));\n                var transit;\n                if (animation) {\n                    transit1 = svgContainer.selectAll(\".\" + object.className + \"Group\")\n    //                    .data(object.data)\n                        .transition()\n                        .duration(500);\n                    transit2 = svgContainer.selectAll(\".\" + object.className)\n                        .transition()\n                        .duration(500);\n                }\n                else {\n                    transit1 = svgContainer.selectAll(\".\" + object.className + \"Group\");\n                    transit2 = svgContainer.selectAll(\".\" + object.className);\n                }\n                transit1.attr(\"transform\", function (d) {\n                            return \"translate(\" + rectX(d) + \",0)\"\n                        });\n\n                transit2\n                    .attr(\"width\", rectWidth2);\n                svgContainer.selectAll(\".\" + object.className + \"Text\")\n                    .style(\"visibility\", function (d) {\n                        if (d.description) {\n                            return (scaling(d.y) - scaling(d.x)) > d.description.length * 8 && object.height > 11 ? \"visible\" : \"hidden\";\n                        } else return \"hidden\";\n                    });\n            },\n            multiRec: function (object) {\n                svgContainer.selectAll(\".\" + object.className)\n//                    .data(object.data)\n                    //.transition()\n                    //.duration(500)\n                    .attr(\"x\", function (d) {\n                        return scaling(d.x)\n                    })\n                    .attr(\"width\", function (d) {\n                        return scaling(d.y) - scaling(d.x)\n                    });\n            },\n            unique: function (object) {\n                svgContainer.selectAll(\".line\" + object.className)\n                    .attr(\"d\",line.x(function (d) {\n                    return scaling(d.x);\n                }));\n                var transit;\n                if (animation) {\n                    transit = svgContainer.selectAll(\".\" + object.className)\n    //                    .data(object.data)\n                        .transition()\n                        .duration(500);\n                }\n                else {\n                    transit = svgContainer.selectAll(\".\" + object.className);\n                }\n                transit\n//                    .data(object.data)\n                    //.transition()\n                    //.duration(500)\n                    .attr(\"x\", function (d) {\n                        return scaling(d.x - 0.4)\n                    })\n                    .attr(\"width\", function (d) {\n                        if (scaling(d.x + 0.4) - scaling(d.x - 0.4) < 2) return 2;\n                        else return scaling(d.x + 0.4) - scaling(d.x - 0.4);\n                    });\n            },\n            path: function (object) {\n                svgContainer.selectAll(\".line\" + object.className)\n                    .attr(\"d\",lineBond.x(function (d) {\n                                            return scaling(d.x);\n                                        })\n                                      .y(function (d) {\n                                            return -d.y * 10 + object.height;\n                                        })\n                         );\n                var transit;\n                if (animation) {\n                    transit = svgContainer.selectAll(\".\" + object.className)\n    //                    .data(object.data)\n                        .transition()\n                        .duration(500);\n                }\n                else {\n                    transit = svgContainer.selectAll(\".\" + object.className);\n                }\n                transit\n                    .attr(\"d\", lineBond.y(function (d) {\n                        return -d.y * 10 + object.height;\n                    }));\n            },\n            line: function (object) {\n                lineYscale.range([0, -(object.height)]).domain([0, -(object.level)]);\n                svgContainer.selectAll(\".line\" + object.className)\n                    .attr(\"d\", lineGen.y(function (d) {\n                        return lineYscale(-d.y) * 10 + object.shift;\n                    }));\n                var transit;\n                if (animation) {\n                    transit = svgContainer.selectAll(\".\" + object.className)\n    //                    .data(object.data)\n                        .transition()\n                        .duration(500);\n                }\n                else {\n                    transit = svgContainer.selectAll(\".\" + object.className);\n                }\n                \n                transit\n                    .attr(\"d\", lineGen.y(function (d) {\n                        return lineYscale(-d.y) * 10 + object.shift;\n                    })\n                          .interpolate(object.interpolation)\n                         );\n            },\n            text: function (object, start) {\n                var transit;\n                if (animation) {\n                    transit = svgContainer.selectAll(\".\" + object.className)\n    //                    .data(object.data)\n                        .transition()\n                        .duration(500);\n                }\n                else {\n                    transit = svgContainer.selectAll(\".\" + object.className);\n                }\n                transit\n                    .attr(\"x\", function (d, i) {\n                        return scaling(i + start)\n                    });\n            }\n        };\n\n        var brush = d3.svg.brush()\n            .x(scaling)\n            //.on(\"brush\", brushmove)\n            .on(\"brushend\", brushend);\n\n        function addBrush() {\n            svgContainer.append(\"g\")\n                .attr(\"class\", \"brush\")\n                .call(brush)\n                .selectAll(\"rect\")\n                .attr('height', Yposition + 50);\n        }\n        \n        this.zoom = function(start, end){\n            var zoomInside = current_extend.start<start && current_extend.end>end;\n            if (!zoomInside) {\n                svgContainer.selectAll(\".seqGroup\").remove();\n            }\n            brush.extent([start,end]);\n            brushend();\n        }\n        this.resetZoom = function(start, end){\n            resetAll();\n        }\n\n        function brushend() {\n            d3.select(div).selectAll('div.selectedRect').remove();\n            if (Object.keys(featureSelected).length !== 0 && featureSelected.constructor === Object) {\n                d3.select(featureSelected.id).style(\"fill\", featureSelected.originalColor);\n                featureSelected = {};\n                if (CustomEvent) {\n                    var event = new CustomEvent(self.events.FEATURE_DESELECTED_EVENT, {\n                        detail: {info:\"feature-deselected\"}\n                    });\n                    svgElement.dispatchEvent(event);\n                } else {\n                    console.warn(\"CustomEvent is not defined....\");\n                }\n                if (self.trigger) self.trigger(self.events.FEATURE_DESELECTED_EVENT, {info:\"feature-deselected\"});\n            }\n            // Check if brush is big enough before zooming\n            var extent = brush.extent();\n            var extentLength = Math.abs(extent[0] - extent[1]);\n\n            if (extent[0] < extent[1]) var start = parseInt(extent[0] - 1),\n                end = parseInt(extent[1] + 1);\n            else var start = parseInt(extent[1] + 1),\n                end = parseInt(extent[0] - 1);\n\n            var seq = displaySequence(extentLength);\n            if (!brush.empty() && extentLength > zoomMax) {\n                current_extend.length = extentLength;\n                var zoomScale = (fvLength / extentLength).toFixed(1);\n                $(div + \" .zoomUnit\").text(zoomScale.toString());\n                \n//                scaling.range([5,width-5]); \n                if (SVGOptions.showSequence && !(intLength) && seq && svgContainer.selectAll(\".AA\").empty()) {\n                    current_extend = { \n                    length : extentLength,\n                    start : start,\n                    end : end\n                    }\n                    seqShift = start;\n                    svgContainer.selectAll(\".sequenceLine\").remove();\n                    fillSVG.sequence(sequence.substring(start-1, end), 20, seqShift-1);\n                }\n\n                //modify scale\n//                scaling.range([5,width-5]);\n                scaling.domain(extent);\n                scalingPosition.range(extent);\n                var currentShift = seqShift ? seqShift : offset.start;\n                \n\n                transition_data(features, currentShift);\n                reset_axis();\n\n                if (CustomEvent) {\n                  svgElement.dispatchEvent(new CustomEvent(\n                    self.events.ZOOM_EVENT,\n                    {detail: { start: start, end: end, zoom: zoomScale }}\n                    ));\n                }\n                if (self.trigger) self.trigger(self.events.ZOOM_EVENT, {\n                            start: start,\n                            end: end,\n                            zoom: zoomScale\n                        });\n\n                //rectsPep2.classed(\"selected\", false);\n                d3.select(div).selectAll(\".brush\").call(brush.clear());\n            } else {\n                d3.select(div).selectAll(\".brush\").call(brush.clear());\n                //resetAll();\n            }\n        }\n//        \n        var resizeCallback = function(){\n            \n            updateWindow();\n        }\n        \n        $(window).on(\"resize\", resizeCallback);\n        \n        function updateWindow(){\n//            var new_width = $(div).width() - margin.left - margin.right - 17;\n//            var width_larger = (width < new_width);\n            \n            width = $(div).width() - margin.left - margin.right - 17;\n            d3.select(div+\" svg\")\n                .attr(\"width\", width + margin.left + margin.right);\n            d3.select(div+\" #clip>rect\").attr(\"width\", width);\n            if (SVGOptions.brushActive) {\n                d3.select(div+\" .background\").attr(\"width\", width);\n            }\n            d3.select(div).selectAll(\".brush\").call(brush.clear());\n            \n//            var currentSeqLength = svgContainer.selectAll(\".AA\").size();\n            var seq = displaySequence(current_extend.length);\n            if (SVGOptions.showSequence && !(intLength)){\n                if (seq === false && !svgContainer.selectAll(\".AA\").empty()) {\n                    svgContainer.selectAll(\".seqGroup\").remove();\n                    fillSVG.sequenceLine();\n                }\n                else if (seq === true && svgContainer.selectAll(\".AA\").empty()){\n                    svgContainer.selectAll(\".sequenceLine\").remove();\n                    fillSVG.sequence(sequence.substring(current_extend.start-1, current_extend.end), 20, current_extend.start-1);\n                    \n                }\n            }\n            \n            scaling.range([5,width-5]);\n            scalingPosition.domain([0, width]);\n            \n            transition_data(features, current_extend.start);\n            reset_axis();\n            \n        }\n\n        // If brush is too small, reset view as origin\n        function resetAll() {\n\n            //reset scale\n\n            $(\".zoomUnit\").text(\"1\");\n            scaling.domain([offset.start, offset.end]);\n            scalingPosition.range([offset.start, offset.end]);\n            var seq = displaySequence(offset.end - offset.start);\n            \n            if (SVGOptions.showSequence && !(intLength)){\n                if (seq === false && !svgContainer.selectAll(\".AA\").empty()){\n                    svgContainer.selectAll(\".seqGroup\").remove();\n                    fillSVG.sequenceLine();\n                }\n                else if (current_extend.length !== fvLength && seq === true && !svgContainer.selectAll(\".AA\").empty()) {\n                    svgContainer.selectAll(\".seqGroup\").remove();\n                    fillSVG.sequence(sequence.substring(offset.start-1,offset.end), 20, offset.start);\n                }\n            }\n\n            current_extend={ \n                    length : offset.end-offset.start,\n                    start : offset.start,\n                    end : offset.end\n                };\n            seqShift=0;\n            \n            transition_data(features, offset.start);\n            reset_axis();\n\n            // Fire Event\n            if (CustomEvent) {\n              svgElement.dispatchEvent(new CustomEvent(self.events.ZOOM_EVENT,\n                { detail: { start: 1, end: sequence.length, zoom: 1 }}));\n            };\n            if (self.trigger) self.trigger(self.events.ZOOM_EVENT, {\n                            start: 1,\n                            end: sequence.length,\n                            zoom: 1\n                        });\n\n            d3.select(div).selectAll(\".brush\").call(brush.clear());\n        }\n\n        function transition_data(features, start) {\n            features.forEach(function (o) {\n                if (o.type === \"rect\") {\n                    transition.rectangle(o);\n                } else if (o.type === \"multipleRect\") {\n                    transition.multiRec(o);\n                } else if (o.type === \"unique\") {\n                    transition.unique(o);\n                } else if (o.type === \"path\") {\n                    transition.path(o);\n                } else if (o.type === \"line\") {\n                    transition.line(o);\n                } else if (o.type === \"text\") {\n                    transition.text(o, start);\n                }\n            });\n        }\n\n        /** export to new axis file? */\n        function reset_axis() {\n            svgContainer\n                .transition().duration(500)\n                .select(\".x.axis\")\n                .call(xAxis);\n        }\n\n        function addVerticalLine() {\n            var vertical = d3.select(\".chart\")\n                .append(\"div\")\n                .attr(\"class\", \"Vline\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"19\")\n                .style(\"width\", \"1px\")\n                .style(\"height\", (Yposition + 50) + \"px\")\n                .style(\"top\", \"30px\")\n                // .style(\"left\", \"0px\")\n                .style(\"background\", \"#000\");\n\n            d3.select(\".chart\")\n                .on(\"mousemove.Vline\", function () {\n                    mousex = d3.mouse(this)[0] - 2;\n                    vertical.style(\"left\", mousex + \"px\")\n                });\n            //.on(\"click\", function(){\n            //    mousex = d3.mouse(this);\n            //    mousex = mousex[0] + 5;\n            //    vertical.style(\"left\", mousex + \"px\")});\n        }\n\n        this.addRectSelection = function (svgId) {\n            var featSelection = d3.select(svgId);\n            var elemSelected = featSelection.data();\n            var xTemp;\n            var yTemp;\n            var xRect;\n            var widthRect;\n            var svgWidth = SVGOptions.brushActive ? d3.select(\".background\").attr(\"width\") : svgContainer.node().getBBox().width;\n            d3.select('body').selectAll('div.selectedRect').remove();\n\n            var objectSelected = {type:featSelection[0][0].tagName, color:featSelection.style(\"fill\")};\n            colorSelectedFeat(svgId, objectSelected);\n\n            // Append tooltip\n            var selectedRect = d3.select(div)\n                .append('div')\n                .attr('class', 'selectedRect');\n\n            if (elemSelected[0].length === 3) {\n                xTemp = elemSelected[0][0].x;\n                yTemp = elemSelected[0][1].x;\n            } else if (elemSelected[0].x === elemSelected[0].y) {\n                xTemp = elemSelected[0].x - 0.5;\n                yTemp = elemSelected[0].y + 0.5;\n            } else {\n                xTemp = elemSelected[0].x;\n                yTemp = elemSelected[0].y;\n            }\n            if (scaling(xTemp) < 0) {\n                xRect = margin.left;\n                widthRect = (scaling(yTemp));\n            } else if (scaling(yTemp) > svgWidth) {\n                xRect = scaling(xTemp) + margin.left;\n                widthRect = svgWidth - scaling(xTemp);\n            } else {\n                xRect = scaling(xTemp) + margin.left;\n                widthRect = (scaling(yTemp) - scaling(xTemp));\n            }\n            selectedRect.style({\n                left: xRect + 'px',\n                top: 60 + 'px',\n                'background-color': 'rgba(0, 0, 0, 0.2)',\n                width: widthRect + 'px',\n                height: (Yposition + 50) + 'px',\n                position: 'absolute',\n                'z-index': -1,\n                'box-shadow': '0 1px 2px 0 #656565'\n            });\n        };\n\n        function initSVG(div, options) {\n\n            if (typeof options === 'undefined') {\n                var options = {\n                    'showAxis': false,\n                    'showSequence': false,\n                    'brushActive': false,\n                    'verticalLine': false,\n                    'toolbar': false,\n                    'bubbleHelp': false,\n                    'unit': \"units\",\n                    'zoomMax': 50\n                }\n            }\n\n            if (!$.fn.popover) {\n                options.bubbleHelp = false;\n                console.warn(\"The bubble help requires tooltip and popover bootstrap js libraries. The feature viewer will continue to work, but without the info bubble\");\n            }\n\n            // Create SVG\n            if (options.zoomMax) {\n                zoomMax = options.zoomMax;\n            }\n            if (!options.unit) {\n                options.unit = \"units\";\n            }\n            if (options.animation) {\n                animation = options.animation;\n            }\n\n            if (options.toolbar === true) {\n                \n                var headerOptions = $(div + \" .svgHeader\").length ? d3.select(div + \" .svgHeader\") : d3.select(div).append(\"div\").attr(\"class\", \"svgHeader\");\n                \n//                if (options.toolbarTemplate && options.toolbarTemplate === 2) {\n\n                    if (!$(div + ' .header-position').length) {\n                        var headerPosition = headerOptions\n                            .append(\"div\")\n                            .attr(\"class\", \"header-position\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"margin\", \"15px 10px 0px\")\n                            .style(\"padding\", \"0px\")\n                            .style(\"line-height\",\"32px\");\n                        headerPosition\n                            .append(\"div\")\n                            .attr(\"class\", \"position-label\")\n                            .style(\"padding\", \"0px 5px\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"padding\", \"0px\")\n                            .style(\"font-weight\",\"700\")\n                            .text(\"Position  :  \");\n                        headerPosition\n                            .append(\"div\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"padding\", \"0px\")\n                            .style(\"padding-left\", \"5px\")\n                            .append(\"div\")\n                            .style(\"min-width\",\"50px\")\n                            .attr(\"id\", \"zoomPosition\")\n                            .text(\"0\");\n                    }\n                    if (!$(div + ' .header-zoom').length) {\n                        var headerZoom = headerOptions\n                            .append(\"div\")\n                            .attr(\"class\", \"header-zoom\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"margin\", \"15px 0px 0px\")\n                            .style(\"padding\", \"0px\")\n                            .style(\"line-height\",\"32px\");\n                        headerZoom\n                            .append(\"div\")\n                            .attr(\"class\", \"zoom-label\")\n                            .style(\"padding\", \"0px 5px\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"padding\", \"0px\")\n                            .style(\"font-weight\",\"700\")\n                            .text(\"Zoom : \");\n\n                        headerZoom\n                            .append(\"div\")\n                            .style(\"display\", \"inline-block\")\n                            .style(\"padding\", \"0px\")\n                            .append(\"div\")\n                            .style(\"min-width\",\"50px\")\n                            .style(\"padding-left\", \"5px\")\n                            .append(\"span\")\n                            .text(\"x \")\n                            .append(\"span\")\n                            .attr(\"class\", \"zoomUnit\")\n                            .text(\"1\");\n                    }\n//                }\n//                else{\n//                    if (!$(div + ' .header-zoom').length) {\n//                        var headerZoom = headerOptions\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel panel-default header-zoom\")\n//                            .style(\"display\", \"inline-block\")\n//                            .style(\"width\", \"150px\")\n//                            .style(\"margin\", \"20px 0px 0px\")\n//                            .style(\"padding\", \"0px\");\n//                        headerZoom\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel-heading\")\n//                            .style(\"padding\", \"0px 15px\")\n//                            .style(\"border-right\", \"1px solid #DDD\")\n//                            .style(\"display\", \"inline-block\")\n//                            .style(\"width\", \"80px\")\n//                            .append(\"h5\")\n//                            .style(\"padding\", \"0px\")\n//                            .style(\"height\", \"10px\")\n//                            .style(\"color\", \"#777\")\n//                            .text(\"ZOOM\");\n//                        headerZoom\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel-body\")\n//                            .style(\"display\", \"inline-block\")\n//                            .style(\"padding\", \"0px\")\n//                            .append(\"h5\")\n//                            .style(\"padding-left\", \"15px\")\n//                            .style(\"height\", \"10px\")\n//                            .text(\"x \")\n//                            .append(\"span\")\n//                            .attr(\"class\", \"zoomUnit\")\n//                            .text(\"1\");\n//                    }\n//                    if (!$(div + ' .header-position').length) {\n//                        var headerPosition = headerOptions\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel panel-default header-position\")\n//                            .style(\"display\", \"inline-block\")\n//                            .style(\"width\", \"175px\")\n//                            .style(\"margin\", \"20px 20px 0px\")\n//                            .style(\"padding\", \"0px\");\n//                        headerPosition\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel-heading\")\n//                            .style(\"padding\", \"0px 15px\")\n//                            .style(\"border-right\", \"1px solid #DDD\")\n//                            .style(\"display\", \"inline-block\")\n//                            .append(\"h5\")\n//                            .style(\"padding\", \"0px\")\n//                            .style(\"height\", \"10px\")\n//                            .style(\"color\", \"#777\")\n//                            .text(\"POSITION\");\n//                        headerPosition\n//                            .append(\"div\")\n//                            .attr(\"class\", \"panel-body\")\n//                            .style(\"display\", \"inline-block\")\n//                            .style(\"padding\", \"0px\")\n//                            .append(\"h5\")\n//                            .style(\"padding-left\", \"15px\")\n//                            .style(\"height\", \"10px\")\n//                            .append(\"span\")\n//                            .attr(\"id\", \"zoomPosition\")\n//                            .text(\"0\");\n//                    }\n//                }\n                var headerZoom = $(div + ' .header-zoom').length ? d3.select(div + ' .header-zoom') : headerOptions;\n                if (options.bubbleHelp === true) {\n                    if (!$(div + ' .header-help').length) {\n                        var helpContent = \"<div><strong>To zoom in :</strong> Left click to select area of interest</div>\" +\n                            \"<div><strong>To zoom out :</strong> Right click to reset the scale</div>\" +\n                            \"<div><strong>Zoom max  :</strong> Limited to <strong>\" + zoomMax.toString() + \" \" + options.unit +\"</strong></div>\";\n//                        var headerHelp = headerOptions\n                        var headerHelp = headerZoom\n                            .append(\"div\")\n//                            .insert(\"div\",\":first-child\")\n//                            .attr(\"class\", \"pull-right\")\n                            .style(\"display\", \"inline-block\")\n//                            .style(\"margin\", \"15px 35px 0px 0px\")\n                            .style(\"margin\", \"0px\")\n                            .style(\"margin-right\", \"5px\")\n//                            .style(\"line-height\",\"32px\")\n                            .style(\"padding\", \"0px\");\n                        var buttonHelp = headerHelp\n                            .append(\"a\")\n                            .attr(\"type\", \"button\")\n                            .attr(\"class\", \"header-help\")\n                            .attr(\"data-toggle\", \"popover\")\n                            .attr(\"data-placement\", \"auto left\")\n                            .attr(\"title\", \"Help\")\n                            .attr(\"data-content\", helpContent)\n                            .style(\"font-size\", \"14px\");\n//                            .style(\"margin-bottom\", \"2px\");\n                        buttonHelp\n                            .append(\"span\")\n                            .attr(\"class\", \"label label-as-badge label-info\")\n                            .style(\"font-weight\",\"500\")\n//                            .style(\"border-radius\",\"3px\")\n                            .style(\"border-radius\",\"3px\")\n//                            .style(\"background-color\",\"#f8f8f8\")\n//                            .style(\"background-color\",\"#108D9F\")\n//                            .style(\"border\",\"1px solid #ddd\")\n//                            .style(\"border\",\"1px solid #0C6B78\")\n//                            .style(\"color\",\"#777\")\n                            .style(\"box-shadow\",\"inset 0px 0px 4px rgba(0,0,0,0.10)\")\n                            .style(\"color\",\"#fff\")\n//                            .style(\"padding\",\"2px 6px\")\n                            .html(\"<span class='state'>Show</span> help\");\n                        $(function () {\n                            $('[data-toggle=\"popover\"]').popover({html: true});\n                            $(div + ' .header-help').on('hide.bs.popover', function () {\n                              $(this).find(\".state\").text(\"Show\");\n                            });\n                            $(div + ' .header-help').on('show.bs.popover', function () {\n                              $(this).find(\".state\").text(\"Hide\");\n                            });\n                        })\n                    }\n                }\n            }\n            \n            svg = d3.select(div).append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .style(\"z-index\", \"2\")\n                .on(\"contextmenu\", function (d, i) {\n                    d3.event.preventDefault();\n                    resetAll();\n                    // react on right-clicking\n                });\n            svgElement = el.getElementsByTagName(\"svg\")[0];\n\n\n            svgContainer = svg\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            //Create Clip-Path\n            var defs = svgContainer.append(\"defs\");\n\n            defs.append(\"clipPath\")\n                .attr(\"id\", \"clip\")\n                .append(\"rect\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n            var filter = defs.append(\"filter\")\n                .attr(\"id\", \"dropshadow\")\n                .attr(\"height\", \"200%\");\n\n            filter.append(\"feGaussianBlur\")\n                .attr(\"in\", \"SourceAlpha\")\n                .attr(\"stdDeviation\", 3)\n                .attr(\"result\", \"blur\");\n            filter.append(\"feOffset\")\n                .attr(\"in\", \"blur\")\n                .attr(\"dx\", -2)\n                .attr(\"dy\", 2)\n                .attr(\"result\", \"offsetBlur\");\n\n            var feMerge = filter.append(\"feMerge\");\n\n            feMerge.append(\"feMergeNode\")\n                .attr(\"in\", \"offsetBlur\");\n            feMerge.append(\"feMergeNode\")\n                .attr(\"in\", \"SourceGraphic\");\n\n            svgContainer.on('mousemove', function () {\n                var absoluteMousePos = SVGOptions.brushActive ? d3.mouse(d3.select(\".background\").node()) : d3.mouse(svgContainer.node());;          \n                var pos = Math.round(scalingPosition(absoluteMousePos[0]));\n                if (!options.positionWithoutLetter) {\n                    pos += sequence[pos-1] || \"\";\n                }\n                $(div + \" #zoomPosition\").text(pos);\n            });\n            \n            if (typeof options.dottedSequence !== \"undefined\"){\n                SVGOptions.dottedSequence = options.dottedSequence;\n            }\n            if (options.showSequence && !(intLength)) {\n                SVGOptions.showSequence = true;\n                if (displaySequence(offset.end - offset.start)) {\n                    fillSVG.sequence(sequence.substring(offset.start-1, offset.end), Yposition, offset.start);\n                }\n                else{\n                    fillSVG.sequenceLine();\n                }\n                features.push({\n                    data: sequence,\n                    name: \"Sequence\",\n                    className: \"AA\",\n                    color: \"black\",\n                    type: \"text\"\n                });\n                yData.push({\n                    title: \"Sequence\",\n                    y: Yposition - 8\n                });\n            }\n            if (options.showAxis) addXAxis(Yposition);\n            addYAxis();\n            if (options.brushActive) {\n                SVGOptions.brushActive = true;\n                zoom = true;\n                addBrush();\n            }\n            if (options.verticalLine) {\n                SVGOptions.verticalLine = true;\n                addVerticalLine();\n            }\n\n            updateSVGHeight(Yposition);\n\n        }\n\n        initSVG(div, options);\n\n        this.addFeature = function (object) {\n            Yposition += 20;\n            features.push(object);\n            fillSVG.typeIdentifier(object);\n            updateYaxis();\n            updateXaxis(Yposition);\n            updateSVGHeight(Yposition);\n            if (SVGOptions.brushActive) {\n                svgContainer.selectAll(\".brush rect\")\n                    .attr('height', Yposition + 50);\n            }\n            if (SVGOptions.verticalLine) d3.selectAll(\".Vline\").style(\"height\", (Yposition + 50) + \"px\");\n            if (d3.selectAll(\".element\")[0].length > 1500) animation = false;\n\n        }\n        \n        this.clearInstance = function (){\n            $(window).off(\"resize\", resizeCallback);\n            svg = null;\n            svgElement = null;\n            svgContainer = null;\n            yAxisSVGgroup = null;\n            yAxisSVG = null;\n            features = null;\n            sbcRip = null;\n            d3.helper = {};\n        }\n\n    }\n\nif (  true && typeof module.exports === \"object\" ) {\n    module.exports = createFeature;\n}\n\n//# sourceURL=webpack://FeatureViewer/./src/feature-viewer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/feature-viewer.js");
/******/ 	FeatureViewer = __webpack_exports__;
/******/ 	
/******/ })()
;